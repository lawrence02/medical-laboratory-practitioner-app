package com.medicallab.council.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QualificationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualificationAllPropertiesEquals(Qualification expected, Qualification actual) {
        assertQualificationAutoGeneratedPropertiesEquals(expected, actual);
        assertQualificationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualificationAllUpdatablePropertiesEquals(Qualification expected, Qualification actual) {
        assertQualificationUpdatableFieldsEquals(expected, actual);
        assertQualificationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualificationAutoGeneratedPropertiesEquals(Qualification expected, Qualification actual) {
        assertThat(expected)
            .as("Verify Qualification auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualificationUpdatableFieldsEquals(Qualification expected, Qualification actual) {
        assertThat(expected)
            .as("Verify Qualification relevant properties")
            .satisfies(e -> assertThat(e.getQualificationName()).as("check qualificationName").isEqualTo(actual.getQualificationName()))
            .satisfies(e -> assertThat(e.getNameOfInstitute()).as("check nameOfInstitute").isEqualTo(actual.getNameOfInstitute()))
            .satisfies(e -> assertThat(e.getDateFrom()).as("check dateFrom").isEqualTo(actual.getDateFrom()))
            .satisfies(e -> assertThat(e.getDateTo()).as("check dateTo").isEqualTo(actual.getDateTo()))
            .satisfies(e -> assertThat(e.getAwardedBy()).as("check awardedBy").isEqualTo(actual.getAwardedBy()))
            .satisfies(e -> assertThat(e.getAwardedDate()).as("check awardedDate").isEqualTo(actual.getAwardedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualificationUpdatableRelationshipsEquals(Qualification expected, Qualification actual) {
        assertThat(expected)
            .as("Verify Qualification relationships")
            .satisfies(e -> assertThat(e.getPractitioner()).as("check practitioner").isEqualTo(actual.getPractitioner()));
    }
}
